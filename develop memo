## 要件
ユーザーの登録・認証機能は必要です。 ただ、予約を行うuser側は認証せずに予約できるようにしたいです。
複数のユーザーが予約を共有できるようにしたいです。
予約の種類はいくつかあり、管理者が後から追加したものの中から選択できるようにしたいです。
リマインダー機能はとりあえずはなくて大丈夫です。
モバイルアプリも作る予定はないですが、レスポンシブデザインで開発したいです。

## DB 設計
ざっくりとした設計。
- User table(管理者ユーザーのみいる)
master user id
email
password
reservation id

- reservation table(予約自体の詳細)
reservation id
reserve type
description
start_time
end_time
description

- reservation type table(予約タイプの詳細)
reserve type
reserve description
reserve duration - 予約中にかかる時間
fee - かかる料金

->
type User struct {
    ID       int
    Name     string
    Email    string
    Password string
    Role     string
}

type ReservationType struct {
    ID        int
    Name      string
    CreatedBy int
}

type Reservation struct {
    ID          int
    Title       string
    Description string
    StartTime   time.Time
    EndTime     time.Time
    TypeID      string
    UserID      int
	Fee 		int
}



go では、migration用として、下記を使用。
go get -u github.com/golang-migrate/migrate/v4/cmd/migrate



### ディレクトリについて
```
cmd/web/main.go は、アプリケーションのエントリーポイント(main関数)が含まれるファイルを表しています。

Goのベストプラクティスでは、主要なアプリケーションコードは internal ディレクトリに配置し、外部から参照される補助ツールやスクリプトは cmd ディレクトリに配置することが推奨されています。

cmd/web/main.go は以下のような役割を担います:

アプリケーションの初期化
ルーティングの設定
HTTPサーバーの起動
その他アプリケーションの実行に必要な処理
internal ディレクトリに配置されるコード(ライブラリやビジネスロジックなど)とは別に、cmd/web/main.go はアプリケーションの起動と実行に特化したコードになります。

この構造にすることで、以下のメリットがあります:

アプリケーションのエントリーポイントが明確に分離される
internal ディレクトリのコードとエントリーポイントのコードが分離されるため、疎結合になる
複数のコマンドラインツール(cliツールやバッチツールなど)を作成する場合に柔軟に対応できる
cmd/web/main.goをserver/ディレクトリに配置しない理由は、エントリーポイントとビジネスロジックを分離するためです。main.go はアプリケーションの実行に特化したコードなので、ビジネスロジックのコードと分離して cmd ディレクトリに配置するのがベストプラクティスとされています。

この構造に従うことで、アプリケーションの役割が明確になり、コードの保守性と可読性が向上します。
```


sudo postgresql-setup initdb
sudo systemctl start postgresql
sudo systemctl enable postgresql